import json
import os
from datetime import datetime

class Contact:
    def __init__(self, name, phone, email="", address="", notes=""):
        self.name = name
        self.phone = phone
        self.email = email
        self.address = address
        self.notes = notes
        self.created_date = datetime.now().strftime(%Y-%m-%d %H:%M:%S")
        self.last_modified = datetime.now().strftime(%Y-%m-%d %H:%M:%S)  
    def to_dict(self):
        return {
           name': self.name,
        phone': self.phone,
       email': self.email,
         address': self.address,
        notes': self.notes,
         created_date': self.created_date,
          last_modified': self.last_modified
        }
    
    @classmethod
    def from_dict(cls, data):
        contact = cls(data['name], data[phone'], data.get('email', ''), 
                     data.get('address, ), data.get('notes', ''))
        contact.created_date = data.get('created_date', ')      contact.last_modified = data.get(last_modified',     return contact
    
    def update(self, **kwargs):
        for key, value in kwargs.items():
            if hasattr(self, key):
                setattr(self, key, value)
        self.last_modified = datetime.now().strftime(%Y-%m-%d %H:%M:%S")
    
    def display(self):
        print(f"\n{'='*50)
        print(f"Name: {self.name})
        print(f"Phone: {self.phone})     if self.email:
            print(f"Email: {self.email})   if self.address:
            print(f"Address: {self.address})
        if self.notes:
            print(f"Notes: {self.notes})
        print(f"Created: {self.created_date})
        print(f"Last Modified: {self.last_modified})
        print(f{'='*50)

class PhoneBook:
    def __init__(self, filename="phonebook.json):     self.filename = filename
        self.contacts = {}
        self.load_contacts()
    
    def load_contacts(self):
      Load contacts from JSON file"""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r') as file:
                    data = json.load(file)
                    self.contacts = {name: Contact.from_dict(contact_data) 
                                   for name, contact_data in data.items()}
                print(fLoaded{len(self.contacts)} contacts from {self.filename}")
            except Exception as e:
                print(f"Error loading contacts: {e})              self.contacts =[object Object] else:
            print(Noexisting phonebook found. Starting with empty phonebook.")
    
    def save_contacts(self):
      e contacts to JSON file"""
        try:
            data = {name: contact.to_dict() for name, contact in self.contacts.items()}
            with open(self.filename, 'w') as file:
                json.dump(data, file, indent=2)
            print(f"Phonebook saved successfully to {self.filename}")
        except Exception as e:
            print(f"Error saving contacts: {e}")
    
    def add_contact(self, name, phone, email="", address="", notes="):
  Add a new contact"        if name in self.contacts:
            print(f"Contact '{name}' already exists!")
            return False
        
        contact = Contact(name, phone, email, address, notes)
        self.contacts[name] = contact
        print(f"Contact '{name}' added successfully!")
        returntrue   
    def remove_contact(self, name):
 emove a contact by name"        if name in self.contacts:
            del self.contacts[name]
            print(f"Contact '{name}' removed successfully!")
            return True
        else:
            print(f"Contact {name}' not found!")
            return false
    
    def edit_contact(self, name):
n existing contact"       if name not in self.contacts:
            print(f"Contact {name}' not found!")
            return False
        
        contact = self.contacts[name]
        print(f\nEditing contact: {name})      print("Leave blank to keep current value")
        
        # Get new values
        new_name = input(f"Name ({contact.name}): ).strip()
        new_phone = input(f"Phone ({contact.phone}): ).strip()
        new_email = input(f"Email ({contact.email}): ).strip()
        new_address = input(fAddress ({contact.address}): ).strip()
        new_notes = input(f"Notes ({contact.notes}): ").strip()
        
        # Update only if new values are provided
        updates =[object Object]       if new_name and new_name != contact.name:
            if new_name in self.contacts:
                print(f"Contact '{new_name}' already exists!)            returnfalse           updates[name'] = new_name
        if new_phone:
            updates['phone'] = new_phone
        if new_email:
            updates['email'] = new_email
        if new_address:
            updates['address'] = new_address
        if new_notes:
            updates['notes'] = new_notes
        
        if updates:
            contact.update(**updates)
            # If name changed, update the dictionary key
            ifname' in updates:
                self.contacts[new_name] = contact
                del self.contacts[name]
            print(f"Contact updated successfully!")
        else:
            print("No changes made.")
        
        returntrue   
    def search_contacts(self, query):
        Search contacts by name, phone, or email"     query = query.lower()
        results = []
        
        for contact in self.contacts.values():
            if (query in contact.name.lower() or 
                query in contact.phone.lower() or 
                query in contact.email.lower()):
                results.append(contact)
        
        return results
    
    def display_all_contacts(self):
    splay all contacts       if not self.contacts:
            print(No contacts found in phonebook.")
            return
        
        print(f"\n{'='*60)
        print(f"PHONEBOOK - {len(self.contacts)} contacts)
        print(f"{'='*60}")
        
        for i, (name, contact) in enumerate(sorted(self.contacts.items()), 1):
            print(f{i:2d}. {name:<20} | [object Object]contact.phone:<15} | {contact.email}")
    
    def display_contact(self, name):
  Display a specific contact"        if name in self.contacts:
            self.contacts[name].display()
        else:
            print(f"Contact {name}' not found!")
    
    def get_contact_names(self):
        ist of all contact names     return sorted(self.contacts.keys())

def display_menu():
play the main menu    print(n="*50)
    print("           PHONE BOOK MANAGER")
    print("=*50)
    print(1. Add Contact")
    print(2. Remove Contact")
    print("3Edit Contact")
    print("4Search Contacts")
    print("5. Display All Contacts")
    print("6. Display Specific Contact")
    print(7. Save Phonebook")
    print("8. Exit")
    print("="*50)

def get_contact_input():
et contact details from user input""    name = input("Enter name:).strip()
    if not name:
        print("Name is required!")
        return None
    
    phone = input("Enter phone number:).strip()
    if not phone:
        print("Phone number is required!")
        return None
    
    email = input("Enter email (optional): ").strip()
    address = input("Enter address (optional): ").strip()
    notes = input("Enter notes (optional): ").strip()
    
    return name, phone, email, address, notes

def main():
  in function to run the phone book application" phonebook = PhoneBook()
    
    while True:
        display_menu()
        choice = input("\nEnter your choice (1-8): ").strip()
        
        if choice == '1:  # Add Contact
            print("\n--- ADD NEW CONTACT ---")
            contact_data = get_contact_input()
            if contact_data:
                name, phone, email, address, notes = contact_data
                phonebook.add_contact(name, phone, email, address, notes)
                phonebook.save_contacts()
        
        elif choice == '2':  # Remove Contact
            print(n--- REMOVE CONTACT ---")
            phonebook.display_all_contacts()
            if phonebook.contacts:
                name = input("Enter name to remove: ").strip()
                if phonebook.remove_contact(name):
                    phonebook.save_contacts()
        
        elif choice == '3:  # Edit Contact
            print("\n--- EDIT CONTACT ---")
            phonebook.display_all_contacts()
            if phonebook.contacts:
                name = input("Enter name to edit: ").strip()
                if phonebook.edit_contact(name):
                    phonebook.save_contacts()
        
        elif choice == '4':  # Search Contacts
            print(undefinedn--- SEARCH CONTACTS ---")
            query = input(Enter search term: ").strip()
            if query:
                results = phonebook.search_contacts(query)
                if results:
                    print(f"\nFound {len(results)} contact(s):")
                    for contact in results:
                        contact.display()
                else:
                    print(No contacts found matching your search.")
        
        elif choice == '5splay All Contacts
            phonebook.display_all_contacts()
        
        elif choice == '6':  # Display Specific Contact
            print("\n--- DISPLAY CONTACT ---")
            phonebook.display_all_contacts()
            if phonebook.contacts:
                name = input("Enter name to display: ").strip()
                phonebook.display_contact(name)
        
        elif choice == 7  # Save Phonebook
            phonebook.save_contacts()
        
        elif choice == '8':  # Exit
            print("\nSaving phonebook before exit...")
            phonebook.save_contacts()
            print("Thank you for using Phone Book Manager!")
            break
        
        else:
            print("Invalid choice! Please enter a number between 1 and 8.")
        
        input("\nPress Enter to continue...)if __name__ == "__main__":
    main()